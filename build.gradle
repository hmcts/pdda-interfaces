/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {
  dependencies {
    classpath("org.flywaydb:flyway-database-postgresql:10.22.0")
  }
}

plugins {
	id 'application'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.springframework.boot' version '3.5.0'
	id 'com.github.ben-manes.versions' version '0.51.0'
	id 'org.owasp.dependencycheck' version '12.1.0'
	id 'org.sonarqube' version '6.0.1.5171'
	id 'checkstyle'
  	id 'pmd'
  // Comment out id 'war' to work in Eclipse
  id 'war'
  id 'jacoco'
  id 'org.flywaydb.flyway' version '10.22.0'
}

group = 'uk.gov.hmcts'
version = '1.0'
description = 'PDDA'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    functionalTest {
        java {
          compileClasspath += main.output
          runtimeClasspath += main.output
          srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
}

processSmokeTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
    
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099'
    }
}


tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}


tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
    events "standardOut", "started", "passed", "skipped", "failed"
  }
}

test {
  failFast = true
}


// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}



// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "functionalTest",
    "smokeTest",
    "pmd"
  ]
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.7'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.6.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.smokeTest, sourceSets.functionalTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}


jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "pdda"
    property "sonar.projectKey", "pdda-sonarqube"
    property "sonar.exclusions", "**/src/main/java/uk/gov/hmcts/pdda/business/entities/**"
  }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
    }
}

ext {
  log4JVersion = "2.20.0"
}

ext['snakeyaml.version'] = '2.0'

dependencyManagement {
    imports {
        mavenBom "org.springframework:spring-framework-bom:6.2.8"
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    
    implementation 'jakarta.ejb:jakarta.ejb-api:4.0.1'

    // Bean Validation (Jakarta)
    implementation 'org.hibernate.validator:hibernate-validator:8.0.2.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2'

    // JDBC + PostgreSQL
    runtimeOnly 'org.postgresql:postgresql:42.7.7'

    // Logging
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'
    implementation 'ch.qos.logback:logback-core:1.5.18'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'org.slf4j:slf4j-api:2.0.17'

    // SSH/SFTP
    implementation 'com.hierynomus:sshj:0.40.0'
    implementation 'org.apache.sshd:sshd-common:2.14.0'
    implementation 'org.apache.sshd:sshd-sftp:2.14.0'
    implementation 'org.apache.sshd:sshd-core:2.14.0'

    // File/Config Utilities
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-vfs2:2.10.0'
    implementation 'org.apache.commons:commons-configuration2:2.12.0'

    // YAML
    implementation 'org.yaml:snakeyaml:2.3'

    // JSP/Servlet/JSTL (only if actually used)
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
    compileOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:4.0.0'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
    implementation 'jakarta.el:jakarta.el-api:6.0.1'
    implementation 'org.apache.tomee:openejb-core:9.1.3', {
      exclude group: "org.apache.geronimo.mail", module: "geronimo-mail_2.1_provider"
      exclude group: "org.apache.geronimo.components", module: "geronimo-connector"
    }
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'org.apache.hadoop:hadoop-hdfs-client:3.4.1'
    implementation 'org.yaml:snakeyaml:2.3'
    implementation group: 'org.apache.tomee', name: 'jakartaee-api', version: '10.0', {
      exclude group: "org.apache.geronimo.mail", module: "geronimo-mail_2.1_provider"
      exclude group: "org.apache.geronimo.components", module: "geronimo-connector"
    }
	
    // Optional embedded JSP support (if actually using JSPs)
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.42'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.42'
    
    // Bytecode / Proxying
    implementation 'net.bytebuddy:byte-buddy:1.17.5'
    implementation 'org.javassist:javassist:3.30.2-GA'

    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'

    // Hadoop Client (only if required)
    implementation 'org.apache.hadoop:hadoop-hdfs-client:3.4.1'

    // REST Testing
    implementation 'io.rest-assured:rest-assured'
    
    // Apache Xalan Serializer
	implementation 'xalan:serializer:2.7.3'

	// Castor XML support (includes org.exolab.castor.util and org.exolab.castor.xml)
	implementation 'org.codehaus.castor:castor-codegen:1.4.1'
	
	// Legacy RMI API (javax.rmi.PortableRemoteObject)
	implementation 'org.jboss.spec.javax.rmi:jboss-rmi-api_1.0_spec:1.0.6.Final'
	
    // Optional: SFTP test support
    implementation 'de.ppi:fake-sftp-server-extension:1.0.3'
    testImplementation 'com.github.stefanbirkner:fake-sftp-server-rule:2.0.0'
    implementation 'com.jcraft:jsch:0.1.55'
    

    // Testing
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
    	exclude group: 'junit', module: 'junit'
    	exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.4'
    testImplementation 'org.easymock:easymock:5.5.0'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'
    
    testImplementation 'jakarta.ejb:jakarta.ejb-api:4.0.1'
    

    // Compile-only: Jakarta APIs (only for compilation)
    compileOnly 'org.apache.tomee:jakartaee-api:10.0'
    compileOnly 'org.springframework.boot:spring-boot-starter-tomcat:3.5.0'

    // Optional: If you're stuck with local jsch for some reason
    // Better to replace this with a Maven version if possible
    // implementation files('lib/jsch-0.1.54.jar')

    // Security
    implementation 'org.bouncycastle:bcprov-jdk18on:1.79'

    // Flyway (already pulled via plugins, but OK to be explicit)
    implementation 'org.flywaydb:flyway-core:10.22.0'
    implementation 'org.flywaydb:flyway-database-postgresql:10.22.0'
    implementation 'org.flywaydb:flyway-database-hsqldb:10.22.0'
}


mainClassName = 'uk.gov.hmcts.PddaSpringbootApplication'

bootJar {
  archiveFileName = "PDDA-1.0.war"

  manifest {
    attributes('Implementation-Version': project.version.toString()) 
  }
}

// Needed to stop eclipse showing errors on org.w3c.dom / org.xml.sax imports
configurations {
   smokeTestImplementation.extendsFrom testImplementation
   smokeTestRuntimeOnly.extendsFrom runtimeOnly
   functionalTestImplementation.extendsFrom testImplementation
   functionalTestRuntimeOnly.extendsFrom runtimeOnly
   all*.exclude group: 'xml-apis', module: 'xml-apis'
   all*.exclude group: 'org.apache.tomee', module: 'openejb-core'
   all*.exclude group: 'commons-logging', module: 'commons-logging'
 }

 tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

 flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
  schemas = ['pdda']
  locations = ["database", "database/data", "database/packages"]
  // change to false to allow flyway clean to be run
  cleanDisabled = false
  //outOfOrder = true
  //validateOnMigrate = false
  //ignoreMigrationPatterns = ['*:ignored']
}

// this can be run to clean the DB down allowing from a fresh migration from scratch
tasks.register('cleanPostgresDatabase', org.flywaydb.gradle.task.FlywayCleanTask) {
    if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
    }
}

tasks.register('migratePostgresDatabase', org.flywaydb.gradle.task.FlywayMigrateTask) {
    baselineOnMigrate = true
    outOfOrder = true
    if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
    }
}

// set flyway cleanDisabled to true above and uncomment if we require a fresh migration from scratch across all DBs
// migratePostgresDatabase.dependsOn cleanPostgresDatabase
