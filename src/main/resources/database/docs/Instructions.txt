
---------------
CONNECTION INFO
---------------

open SQL Shell (psql)
Server: localhost
Database: pdda
Port: 5432
Username: postgres
Password: postgres


----------------
POSTGRESQL NOTES
----------------

Some commands to consider when using postgresql

\cd *path* - this will change directory to the specified path.
\! pwd - this will print the current directory.
\i '*filename*' - this will run the specified sql file.

SET schema 'pdda'; - this will select the pdda schema. Ensure to set this before running any \i commands.


-------------
PDDA DB SETUP
-------------

Navigate to: 

	/pdda-interfaces/src/main/resources/database/scripts

To create the pdda DB, locate:

	create-pdda-db.sql

Either copy the contents of that file into a new SQL Script and run in DBeaver, this will create the pdda DB. 
Alternatively you can run that file in postgresql to create the pdda DB.

Now run the app using:

	gradle run

FlyWay will be configured to create all the tables, audit tables, indexes, constraints, sequences and triggers
for the pdda schema, by running the files with the naming convention below.

The database scripts follow a naming convention of:

	V1_*__ - These refer to scripts made for Pdda-interfaces
	V2_*__ - These refer to scripts made for Pdm-interfaces
	V3_*__ - These refer to scripts made for Courtel and Firm List /
		 Warned  List / Internet Web Page processing. In development also known as Pdda2.

If you wish to add the test data to your local DB please add this manually by navigating to the test-data directory:

	/pdda-interfaces/src/main/resources/database/test-data

Then locate:

	load_test_data.sql

Either copy the contents of that file into a new SQL Script and run in DBeaver under the pdda schema, this will insert the test data. 
Alternatively you can run that file in postgresql using:

	SET schema 'pdda';

To ensure you are running on the pdda schema, then:

	\i 'load_test_data.sql'

---------------------------------
SETTING MAX NUMBER OF CONNECTIONS
---------------------------------

Make sure to run the following command in postgresql to increase the maximum number of connections, ensure you are in the pdda schema:

	ALTER SYSTEM SET max_connections TO '800';

-------------
FLYWAY REPAIR
-------------

Make sure the following environment variables are populated. These should be the 
url, username and password to the database you wish to repair.

	FLYWAY_URL, FLYWAY_USER, FLYWAY_PASSWORD

Then run the following command from the project folder in terminal:

	gradle flywayrepair -i

----------------
ADDITIONAL NOTES
----------------

Refresh the database using the temp tables (pdda-create-temp-tables.sql is in the temp folder):
\i 'pdda-create-temp-tables.sql'
\i 'pdda-refdata-refresh.sql'

Housekeeping commands:
CALL xhb_housekeeping_pkg.delete_case_ctx(TRUE);
CALL xhb_housekeeping_pkg.initiate_run(p_run_type=>'C', p_success_log=>TRUE);
CALL xhb_housekeeping_pkg.find_all_hk_cases_for_deletion();
CALL xhb_housekeeping_pkg.process_cpp();
CALL xhb_housekeeping_pkg.process_judges();


-------------------------------------
CONNECTION DATA FOR BAIS SFTP TESTING
-------------------------------------

1. Setup test user on your Mac
2. Enable Remote Login on your Mac
3. Set the following values in your XHB_CONFIG_PROP TABLE:

	PDDA_BAIS_SFTP_HOSTNAME = 127.0.0.1:22
	PDDA_BAIS_CP_SFTP_USERNAME = (Your test user on your Mac i.e testUser)
	PDDA_BAIS_CP_SFTP_PASSWORD = (The password for your test user on your Mac)

If testing the CP process set the following field:
	PDDA_BAIS_CP_SFTP_UPLOAD_LOCATION = (A folder on the testUsers directory to use to place the test docs into i.e - /Users/testUser/temp_bais_events_folder/)

If testing the Xhibit process set the following field
	PDDA_BAIS_SFTP_UPLOAD_LOCATION = (A folder on the testUsers directory to use to place the test docs into i.e - /Users/testUser/temp_bais_events_folder/)

Make sure to include forward slash at the end of the UPLOAD_LOCATION path

4. Place the demo bais documents into that folder. These demo documents can be found in:

	/pdda-interfaces/src/main/resources/database/test-data/bais_events_test_data

5. Run the app and they should get processed





-------------------------------------
Importing data from Preprod / Prod
-------------------------------------
On preprod / prod connect to the database via Toad.  To export a table right click and choose Data | Export. 

-- NOTE: Step 3 is the default action if a specific where clause is not listed below: -- 
XHB_CASE - WHERE CASE_ID IN (SELECT CASE_ID FROM XHB_HEARING WHERE HEARING_ID IN (SELECT HEARING_ID FROM XHB_SCHEDULED_HEARING WHERE SCHEDULED_HEARING_ID IN (SELECT SCHEDULED_HEARING_ID FROM XHB_CR_LIVE_DISPLAY)))
XHB_HEARING - WHERE HEARING_ID IN (SELECT HEARING_ID FROM XHB_SCHEDULED_HEARING WHERE SCHEDULED_HEARING_ID IN (SELECT SCHEDULED_HEARING_ID FROM XHB_CR_LIVE_DISPLAY))
XHB_HEARING_LIST - WHERE LIST_ID IN (SELECT LIST_ID FROM XHB_SITTING WHERE SITTING_ID IN (SELECT SITTING_ID FROM XHB_HEARING WHERE HEARING_ID IN (SELECT HEARING_ID FROM XHB_SCHEDULED_HEARING WHERE SCHEDULED_HEARING_ID IN (SELECT SCHEDULED_HEARING_ID FROM XHB_CR_LIVE_DISPLAY))))
XHB_REF_JUDGE - WHERE REF_JUDGE_ID IN (SELECT REF_JUDGE_ID FROM XHB_SITTING WHERE SITTING_ID IN (SELECT SITTING_ID FROM XHB_HEARING WHERE HEARING_ID IN (SELECT HEARING_ID FROM XHB_SCHEDULED_HEARING WHERE SCHEDULED_HEARING_ID IN (SELECT SCHEDULED_HEARING_ID FROM XHB_CR_LIVE_DISPLAY))))
XHB_REF_SYSTEM_CODE - WHERE NVL(OBS_IND,'N')='N' AND CODE_TYPE IN ('HO_POL_FORCE', 'JUDGE_TYPE')
XHB_SCHEDULED_HEARING - WHERE SCHEDULED_HEARING_ID IN (SELECT SCHEDULED_HEARING_ID FROM XHB_CR_LIVE_DISPLAY)
XHB_SITTING - WHERE SITTING_ID IN (SELECT SITTING_ID FROM XHB_HEARING WHERE HEARING_ID IN (SELECT HEARING_ID FROM XHB_SCHEDULED_HEARING WHERE SCHEDULED_HEARING_ID IN (SELECT SCHEDULED_HEARING_ID FROM XHB_CR_LIVE_DISPLAY)))


-- Steps to export --
1. Untick all checkboxes except ‘Detect Automatically'.  
2. Make sure the encoding = UTF8
3. On the Dataset tab add a where clause of “ WHERE NVL(OBS_IND,’N’)='N' “ (this is not required for those tables without an OBS_IND column).
4. The export name must match and replace the ones listed in src/main/resources/database/data so they are automatically imported using flyway. 

-- Steps to import --
5. The pdda schema on the target database must be deleted.  The next run of the application will run flyway and automatically populate the data.